name: Update Replicated
on: [pull_request]
concurrency:
  group: ${{ github.head_ref }}-replicated
  cancel-in-progress: true


jobs:
  api-server:
    name: Build API Server
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./api/Dockerfile
          tags: featureformcom/api-server:${{ env.TAG }}
          push: true

  backup:
    name: Build Backup Image
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export pre-release
        if: ${{ inputs.type == 'pre-release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }}
          push: true

      - name: Build and export release
        if: ${{ inputs.type == 'release' }}
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./backup/Dockerfile
          tags: featureformcom/backup:${{ env.TAG }},featureformcom/backup:latest
          push: true

  coordinator:
    name: Build Coordinator
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./coordinator/Dockerfile.old
          tags: featureformcom/coordinator:${{ env.TAG }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  dashboard:
    name: Build Dashboard
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./dashboard/Dockerfile
          tags: featureformcom/dashboard:${{ env.TAG }}
          push: true

  metadata:
    name: Build Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/Dockerfile
          tags: featureformcom/metadata:${{ env.TAG }}
          push: true

  dashboard-metadata:
    name: Build Dashboard Metadata
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./metadata/dashboard/Dockerfile
          tags: featureformcom/metadata-dashboard:${{ env.TAG }}
          push: true

  serving:
    name: Build Serving
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./serving/Dockerfile
          tags: featureformcom/serving:${{ env.TAG }}
          push: true

  worker:
    name: Build Worker
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./runner/Dockerfile
          tags: featureformcom/worker:${{ env.TAG }}
          push: true

  k8s_runner:
    name: Build k8s Runner
    environment: Deployment
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./provider/scripts/k8s/Dockerfile
          tags: featureformcom/k8s_runner:${{ env.TAG }}
          push: true
  helm:
    name: Package Replicated
    environment: Replicated
    env:
      REPLICATED_APP: featureform
      REPLICATED_API_TOKEN: ${{ secrets.REPLICATED_API_TOKEN }}
    defaults:
      run:
        working-directory: ./
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Get Short SHA
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set production tag
        run: | 
          echo "TAG=0.0.0-${{ steps.vars.outputs.sha_short }}" >> $GITHUB_ENV

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh

      - name: Install Replicated CLI
        run: |
          curl -o install.sh -sSL https://raw.githubusercontent.com/replicatedhq/replicated/master/install.sh
          bash ./install.sh

      - name: Package Helm
        run: |
          sed -i -e "s/0.0.0/${{ env.TAG }}/g" ./charts/featureform/values.yaml 
          sed -i -e "s/0.0.0/${{ env.TAG }}/g" ./charts/manifests/featureform.yaml
          helm package ./charts/featureform -d ./charts/manifests --app-version ${{ env.TAG }} --version ${{ env.TAG }}

      - name: Create Replicated Release
        run: |
          replicated release create --yaml-dir ./charts/manifests --promote $GITHUB_HEAD_REF --auto -y
